name: "Tests"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: {}

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Install poetry
        run: pipx install poetry
      - name: Linting
        run: make lint


  Tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu, macOS, Windows]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        include:
          - os: Ubuntu
            image: ubuntu-latest
          - os: Windows
            image: windows-2022
          - os: macOS
            image: macos-11
      fail-fast: false
    defaults:
      run:
        shell: bash
    needs: Lint
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Get full Python version
        id: full-python-version
        run: echo "version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")" >> $GITHUB_OUTPUT

      - name: Install poetry
        shell: bash
        run: |
          pipx install poetry
          pipx ensurepath

      - name: Set up cache
        uses: actions/cache@v4
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install --with github-actions

      - name: Coverage for pytest
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.3.0
        with:
          env_vars: OS,PYTHON
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          flags: unittests
          files: ./coverage/coverage.xml
          slug: gerbenoostra/poetry-plugin-mono-repo-deps
